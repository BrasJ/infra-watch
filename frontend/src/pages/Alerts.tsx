import { useEffect, useState } from 'react'
import { fetchAlerts, acknowledgeAlert, deleteAlert, createAlert, fetchSnapshots } from '../lib/api'
import type { Alert } from '../types/alert'
import usePageMetadata from '../hooks/usePageMetadata';

export default function Alerts() {
  const [alerts, setAlerts] = useState<Alert[]>([])
  const [snapshots, setSnapshots] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [severityFilter, setSeverityFilter] = useState<string>('')
  const [ackFilter, setAckFilter] = useState<string>('')

  const loadAlerts = () => {
    const filters: { severity?: string; acknowledged?: boolean } = {}
    if (severityFilter) filters.severity = severityFilter
    if (ackFilter) filters.acknowledged = ackFilter === 'true'

    setLoading(true)
    fetchAlerts(filters)
      .then((data: Alert[]) => setAlerts(data))
      .catch((err: unknown) => console.error(err))
      .finally(() => setLoading(false))
  }

  usePageMetadata(
    'Infra-Watch | Alerts',
    'View and manage real-time alerts generated by your alert rules.'
  );

  const [newAlert, setNewAlert] = useState<{
    snapshot_id: string;
    message: string;
    severity: "info" | "warning" | "critical";
    type: string;
    acknowledged: boolean;
  }>({
    snapshot_id: "",
    message: "",
    severity: "info",
    type: "system",
    acknowledged: false,
  });

  // âœ… Load alerts & snapshots on mount
  useEffect(() => {
    loadAlerts()
  }, [severityFilter, ackFilter])

  useEffect(() => {
    fetchSnapshots()
      .then((data: any[]) => setSnapshots(data))
      .catch((err: unknown) => console.error("Failed to load snapshots", err))
  }, [])

  async function handleCreateAlert() {
    try {
      const validSeverities = ["info", "warning", "critical"] as const;
      const safeSeverity = validSeverities.includes(newAlert.severity as any)
        ? (newAlert.severity as "info" | "warning" | "critical")
        : "info";

      const payload = {
        ...newAlert,
        snapshot_id: Number(newAlert.snapshot_id),
        severity: safeSeverity,
      };

      await createAlert(payload);
      setNewAlert({
        snapshot_id: "",
        message: "",
        severity: "info",
        type: "system",
        acknowledged: false,
      });
      loadAlerts();
    } catch (err) {
      console.error("Error creating alert:", err);
    }
  }

  const handleAcknowledge = async (id: number) => {
    try {
      const updated = await acknowledgeAlert(id)
      setAlerts(prev => prev.map(a => a.id === id ? updated : a))
    } catch (e) {
      console.error("Failed to acknowledge alert", e)
    }
  }

  const handleDelete = async (id: number) => {
    try {
      await deleteAlert(id)
      setAlerts(prev => prev.filter(a => a.id !== id))
    } catch (e) {
      console.error("Failed to delete alert", e)
    }
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">System Alerts</h1>

      {/* Filters */}
      <div className="mb-4 flex gap-4">
        <select
          className="border p-2 rounded"
          value={severityFilter}
          onChange={e => setSeverityFilter(e.target.value)}
        >
          <option value="">All Severities</option>
          <option value="info">Info</option>
          <option value="warning">Warning</option>
          <option value="critical">Critical</option>
        </select>

        <select
          className="border p-2 rounded"
          value={ackFilter}
          onChange={e => setAckFilter(e.target.value)}
        >
          <option value="">All States</option>
          <option value="true">Acknowledged</option>
          <option value="false">Unacknowledged</option>
        </select>
      </div>

      {loading ? (
        <p>Loading alerts...</p>
      ) : (
        <table className="min-w-full border border-gray-300">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-2 text-left">Message</th>
              <th className="px-4 py-2 text-left">Severity</th>
              <th className="px-4 py-2 text-left">Type</th>
              <th className="px-4 py-2 text-left">Ack</th>
              <th className="px-4 py-2 text-left">Snapshot</th>
              <th className="px-4 py-2 text-left">Host</th>
              <th className="px-4 py-2 text-left">Created</th>
              <th className="px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {alerts.map(alert => {
              let rowClass = ""
              switch (alert.severity) {
                case "critical": rowClass = "bg-red-100 text-red-800"; break
                case "warning": rowClass = "bg-yellow-100 text-yellow-800"; break
                case "info": rowClass = "bg-blue-100 text-blue-800"; break
                default: rowClass = ""
              }

              return (
                <tr key={alert.id} className={`border-t ${rowClass}`}>
                  <td className="px-4 py-2">{alert.message}</td>
                  <td className="px-4 py-2">{alert.severity}</td>
                  <td className="px-4 py-2">{alert.type}</td>
                  <td className="px-4 py-2">{alert.acknowledged ? "Yes" : "No"}</td>
                  <td className="px-4 py-2">{alert.snapshot_id}</td>
                  <td className="px-4 py-2">{alert.host_id ?? "-"}</td>
                  <td className="px-4 py-2">{new Date(alert.created_at).toLocaleString()}</td>
                  <td className="px-4 py-2 space-x-2">
                    <button
                      className="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600 text-sm"
                      onClick={() => handleAcknowledge(alert.id)}
                    >
                      Ack
                    </button>
                    <button
                      className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600 text-sm"
                      onClick={() => handleDelete(alert.id)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      )}

      <div className="mb-6 p-4 border rounded shadow bg-white space-y-4">
        <h2 className="text-lg font-semibold">Create New Alert</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {snapshots.length === 0 ? (
            <p>No snapshots available.</p>
          ) : (
            <select
              className="border p-2 rounded"
              value={newAlert.snapshot_id}
              onChange={(e) => setNewAlert({ ...newAlert, snapshot_id: e.target.value })}
            >
              <option value="">Select Snapshot</option>
              {snapshots.map(snapshot => (
                <option key={snapshot.id} value={snapshot.id}>
                  Snapshot {snapshot.id}
                </option>
              ))}
            </select>
          )}

          <input
            type="text"
            placeholder="Message"
            className="border p-2 rounded"
            value={newAlert.message}
            onChange={(e) => setNewAlert({ ...newAlert, message: e.target.value })}
          />

          <select
            className="border p-2 rounded"
            value={newAlert.severity}
            onChange={(e) => setNewAlert({ ...newAlert, severity: e.target.value as "info" | "warning" | "critical" })}
          >
            <option value="info">Info</option>
            <option value="warning">Warning</option>
            <option value="critical">Critical</option>
          </select>

          <select
            className="border p-2 rounded"
            value={newAlert.type}
            onChange={(e) => setNewAlert({ ...newAlert, type: e.target.value })}
          >
            <option value="system">System</option>
            <option value="network">Network</option>
          </select>

          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={newAlert.acknowledged}
              onChange={(e) => setNewAlert({ ...newAlert, acknowledged: e.target.checked })}
            />
            <span>Acknowledged</span>
          </label>
        </div>

        <button
          onClick={handleCreateAlert}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Create Alert
        </button>
      </div>
    </div>
  )
}
